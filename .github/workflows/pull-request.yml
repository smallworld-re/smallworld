name: Pull Request
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopen, edited]

env:
  REGISTRY: harbor.harbor.svc.cluster.local
  TZ: UTC
  SCRATCH: /home/runner/_shared

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  # cancel-in-progress: true

jobs:
  Lint:
    runs-on: smallworld-arc
    permissions:
      contents: write
    outputs:
      changes_detected: ${{ steps.ac.outputs.changes_detected }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Install Lint Tools
        run: |
          pip install --upgrade pip
          pip install $(grep isort= constraints.txt)
          pip install $(grep black= constraints.txt)
          pip install $(grep flake8= constraints.txt)
          pip install $(grep mypy= constraints.txt)

      - name: Format
        run: |
          isort . --profile black
          black ./

      - id: ac
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: isort and black"
          commit_author: GitHub Actions <actions@github.com>

      - name: Lint
        if: steps.ac.outputs.changes_detected == 'false'
        run: |
          isort --check --profile black .
          black --check ./
          flake8 ./
          mypy --explicit-package-bases --ignore-missing-imports ./

      - name: Check Title
        if: steps.ac.outputs.changes_detected == 'false'
        env:
          TITLE: ${{ github.event.pull_request.title }}
        run: bash .github/workflows/scripts/conventional.sh "$TITLE"

      - name: Build Artifacts
        if: steps.ac.outputs.changes_detected == 'false'
        run: |
          cd tests
          make -j$(nproc)
          cd elf_core
          make -j$(nproc)

      - name: Save Repo
        if: steps.ac.outputs.changes_detected == 'false'
        run: |
          cd ..
          tar cfz smallworld_${{ github.sha }}.tar.gz smallworld/
          mv smallworld_${{ github.sha }}.tar.gz $SCRATCH

  Unit-Test:
    runs-on: smallworld-arc
    needs: Lint
    if: needs.Lint.outputs.changes_detected == 'false'
    steps:
      - name: Copy Repo
        run: |
          cp $SCRATCH/smallworld_${{ github.sha }}.tar.gz .
          tar xf smallworld_${{ github.sha }}.tar.gz
      - name: Run Unit Tests
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          cd smallworld/
          pip install -e .[development] -c constraints.txt
          cd tests
          python3 unit.py

  Integration-Test:
    runs-on: smallworld-arc
    needs: Lint
    if: needs.Lint.outputs.changes_detected == 'false'
    strategy:
      max-parallel: 20
      matrix:
        include:
          - testsuite: BlockTests
          - testsuite: BranchTests
          - testsuite: CallTests
          - testsuite: C99AbortTests
          - testsuite: C99AbsTests
          - testsuite: C99AsctimeTests
          - testsuite: C99AtexitTests
          - testsuite: C99AtoiTests
          - testsuite: C99AtollTests
          - testsuite: C99AtolTests
          - testsuite: C99CallocTests
          - testsuite: C99ClearerrTests
          - testsuite: C99ClockTests
          - testsuite: C99CtimeTests
          - testsuite: C99DifftimeTests
          - testsuite: C99ExitTests
          - testsuite: C99FcloseTests
          - testsuite: C99FeofTests
          - testsuite: C99FflushTests
          - testsuite: C99FgetcTests
          - testsuite: C99FgetposTests
          - testsuite: C99FgetsTests
          - testsuite: C99FopenTests
          - testsuite: C99FprintfTests
          - testsuite: C99FputcTests
          - testsuite: C99FputsTests
          - testsuite: C99FreadTests
          - testsuite: C99FreeTests
          - testsuite: C99FscanfTests
          - testsuite: C99FseekTests
          - testsuite: C99FsetposTests
          - testsuite: C99FtellTests
          - testsuite: C99FwriteTests
          - testsuite: C99GetcharTests
          - testsuite: C99GetcTests
          - testsuite: C99GetenvTests
          - testsuite: C99GetsTests
          - testsuite: C99GmtimeTests
          - testsuite: C99LabsTests
          - testsuite: C99LlabsTests
          - testsuite: C99LocaltimeTests
          - testsuite: C99MallocTests
          - testsuite: C99MemcmpTests
          - testsuite: C99MemcpyTests
          - testsuite: C99MemmoveTests
          - testsuite: C99MemsetTests
          - testsuite: C99MktimeTests
          - testsuite: C99PrintfTests
          - testsuite: C99PutcharTests
          - testsuite: C99PutcTests
          - testsuite: C99PutsTests
          - testsuite: C99RandTests
          - testsuite: C99ReallocTests
          - testsuite: C99RemoveTests
          - testsuite: C99RenameTests
          - testsuite: C99RewindTests
          - testsuite: C99ScanfTests
          - testsuite: C99SignalTests
          - testsuite: C99SnprintfTests
          - testsuite: C99SprintfTests
          - testsuite: C99SrandTests
          - testsuite: C99SscanfTests
          - testsuite: C99StrcatTests
          - testsuite: C99StrchrTests
          - testsuite: C99StrcmpTests
          - testsuite: C99StrcpyTests
          - testsuite: C99StrcspnTests
          - testsuite: C99StrerrorTests
          - testsuite: C99StrftimeTests
          - testsuite: C99StrlenTests
          - testsuite: C99StrncatTests
          - testsuite: C99StrncmpTests
          - testsuite: C99StrncpyTests
          - testsuite: C99StrpbrkTests
          - testsuite: C99StrrchrTests
          - testsuite: C99StrspnTests
          - testsuite: C99StrstrTests
          - testsuite: C99StrtokTests
          - testsuite: C99SystemTests
          - testsuite: C99TimeTests
          - testsuite: C99TmpfileTests
          - testsuite: C99TmpnamTests
          - testsuite: C99UngetcTests
          - testsuite: ColorizerTests
          - testsuite: DMATests
          - testsuite: DocumentationTests
          - testsuite: ElfTests
          - testsuite: ElfCoreTests
          - testsuite: FloatsTests
          - testsuite: FuzzTests
          - testsuite: LinkElfTests
          - testsuite: HookingTests
          - testsuite: MemhookTests
          - testsuite: PETests
          - testsuite: POSIXBasenameTests
          - testsuite: POSIXBsdSignalTests
          - testsuite: POSIXDirnameTests
          - testsuite: POSIXPthreadSigmaskTests
          - testsuite: POSIXSigactionTests
          - testsuite: POSIXSigaddsetTests
          - testsuite: POSIXSigdelsetTests
          - testsuite: POSIXSigemptysetTests
          - testsuite: POSIXSigfillsetTests
          - testsuite: POSIXSigpendingTests
          - testsuite: POSIXSigprocmaskTests
          - testsuite: RelaTests
          - testsuite: RTOSDemoTests
          - testsuite: SquareTests
          - testsuite: StackTests
          - testsuite: StrlenTests
          - testsuite: StructureTests
          - testsuite: SyscallTests
          - testsuite: SysVModelTests
          - testsuite: TraceExecutionTests
    steps:
      - name: Copy Repo
        run: |
          cp $SCRATCH/smallworld_${{ github.sha }}.tar.gz .
          tar xf smallworld_${{ github.sha }}.tar.gz
      - name: Run Integration Tests
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          cd smallworld/
          pip install -e .[development] -c constraints.txt
          cd tests
          python3 integration.py -v ${{ matrix.testsuite }}

  Results:
    runs-on: smallworld-arc
    needs: [Lint, Unit-Test, Integration-Test]
    if: always()
    steps:
      - name: Formatter committed â€“ new run will verify
        if: needs.Lint.outputs.changes_detected == 'true'
        run: exit 1

      - name: All tests OK
        if: needs.Lint.outputs.changes_detected == 'false' && !contains(needs.*.result, 'failure')
        run: exit 0

      - name: Tests Failed
        if: needs.Lint.outputs.changes_detected == 'false' && contains(needs.*.result, 'failure')
        run: exit 1

      - name: Cleanup
        run: rm $SCRATCH/smallworld_${{ github.sha }}.tar.gz
