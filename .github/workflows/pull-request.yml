name: Pull Request

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopen, edited]

jobs:
  Formatting:
    runs-on: ubuntu-latest
    outputs:
      format_sha: ${{ steps.sha.outputs.hash }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e .[development] -c constraints.txt
      - name: format
        run: |
          isort . --profile black
          black ./
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: isort and black"
          commit_author: GitHub Actions <actions@github.com>
      - name: Save Hash
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
  Lint:
    needs: Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.Formatting.outputs.format_sha}}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e .[development] -c constraints.txt
      - name: Lint
        run: |
          isort --check --profile black .
          black --check ./
          flake8 ./
          mypy --ignore-missing-imports ./

  Build:
    needs: Lint
    runs-on: smallworld-arc
    steps:
      - name: preinit
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs
      - uses: actions/checkout@v3
        with:
          ref: ${{needs.Formatting.outputs.format_sha}}
          lfs: true
      - name: Check Title
        env:
          TITLE: ${{ github.event.pull_request.title }}
        run: |
          bash .github/workflows/scripts/conventional.sh "$TITLE"
      - name: Build Container
        run: |
          export DOCKER_CONFIG=$(mktemp -d)
          docker build . -t docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }}
      - name: Save Container
        run: |
          docker push docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }}

  Unit-Test:
    runs-on: smallworld-arc
    needs: Build
    steps:
      - name: Load Container
        run: |
          docker pull docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }}
          docker tag docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }} smallworld:latest
      - name: Run Unit Tests
        run: |
          docker run -i -w /opt/smallworld/tests smallworld:latest python3 unit.py

  Integration-Test:
    runs-on: smallworld-arc
    needs: Build
    strategy:
      matrix:
        include:
          - testsuite: BlockTests
          - testsuite: BranchTests
          - testsuite: CallTests
          - testsuite: DMATests
          - testsuite: DocumentationTests
          - testsuite: ElfTests
          - testsuite: FloatsTests
          - testsuite: FuzzTests
          - testsuite: HookingTests
          - testsuite: SquareTests
          - testsuite: StackTests
          - testsuite: StrlenTests
          - testsuite: StructureTests
          - testsuite: SyscallTests
          - testsuite: SymbolicTests
    steps:
      - name: Load Container
        run: |
          docker pull docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }}
          docker tag docker-registry.docker-registry.svc.cluster.local:5000/smallworld/smallworld:${{ github.sha }} smallworld:latest
      - name: Run Integration Tests
        run: |
          docker run -i -w /opt/smallworld/tests smallworld:latest python3 integration.py -v ${{ matrix.testsuite }}

  Results:
    runs-on: smallworld-arc
    needs: [Build, Unit-Test, Integration-Test]
    if: always()
    steps:
      - name: All tests OK
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Tests Failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
